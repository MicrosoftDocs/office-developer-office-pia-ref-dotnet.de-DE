<Type Name="IRibbonUI" FullName="Microsoft.Office.Core.IRibbonUI">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f912fe8c8db15a87c031bae5d14f2fe64d719567" />
    <Meta Name="ms.sourcegitcommit" Value="f41bc3cdd2c00b9a51a4340ac823a9e309633924" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20659962" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRibbonUI" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRibbonUI" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Core.IRibbonUI" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRibbonUI" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRibbonUI" />
  <AssemblyInfo>
    <AssemblyName>office</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000C03A7-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="78d2d-p101">Das Objekt, das von der im <b>customUI</b>-Tag angegebenen <b>onLoad</b>-Prozedur zurückgegeben wird. Das Objekt enthält Methoden, um Steuerelementeigenschaften ungültig zu machen und um die Benutzeroberfläche zu aktualisieren.</span>
      <span class="sxs-lookup">
        <span data-stu-id="78d2d-p101">The object that is returned by the <b>onLoad</b> procedure specified on the <b>customUI</b> tag.  The object contains methods for invalidating control properties and for refreshing the user interface.</span>
      </span>
    </summary>
    <remarks>
      <span data-ttu-id="78d2d-103">
        <para>Sie können die Menüband-Benutzeroberfläche (UI) mithilfe von Rückrufprozeduren in COM-add-ins anpassen. Wenn die Host-Anwendung startet, wird die <b>OnLoad</b> -Rückrufprozedur aufgerufen.  Die Callback-Prozedur gibt dann ein <b>IRibbonUI</b> -Objekt auf der Benutzeroberfläche (UI) zeigen. Dieses Objekt können Sie die Methoden <b>Invalidate</b>, <b>InvalidateControl</b>und <b>Aktualisierung von</b> aufzurufen.</para>
        <para />
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="78d2d-103">
          <para>You can customize the Ribbon user interface (UI) by using callback procedures in COM add-ins. When the host application starts, the <b>onLoad</b> callback procedure is called.  The callback procedure then returns a <b>IRibbonUI</b> object pointing to the user interface (UI). YOu can use that object to invoke the <b>Invalidate</b>, <b>InvalidateControl</b>, and <b>Refresh</b> methods.</para>
          <para />
        </span>
      </span>
    </remarks>
    <example>
      <span data-ttu-id="78d2d-104">
        <para>Im folgenden Beispiel löst die hostanwendung starten die <b>OnLoad</b> -Ereignisprozedur, die eine Prozedur ruft dann die erstellt ein <b>IRibbonUI</b> -Objekt zurück, der Menüband-Benutzeroberfläche darstellt.  Im nächsten Schritt eine Rückrufprozedur ist definiert, die alle zwischengespeicherten Steuerelemente ungültig macht und anschließend die Benutzeroberfläche aktualisiert.</para>
        <para>Im folgenden finden Sie das XML-Markup für Office zum Laden des benutzerdefinierten Menübands:</para>
        <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
        <para>Im folgenden ist die Rückrufmethode für das <b>OnLoad</b> -Ereignis:</para>
        <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="78d2d-104">
          <para>In the following example, starting the host application triggers the <b>onLoad</b> event procedure  that then calls a procedure which creates a <b>IRibbonUI</b> object representing the Ribbon UI.  Next, a callback procedure is defined that invalidates all of the cached controls and then refreshes the UI.</para>
          <para>The following is the XML markup for Office to load the custom ribbon:</para>
          <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
          <para>The following is the callback method for the <b>onLoad</b> event:</para>
          <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code>
        </span>
      </span>
    </example>
  </Docs>
  <Members>
    <Member MemberName="ActivateTab">
      <MemberSignature Language="C#" Value="public void ActivateTab (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTab([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTab(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTab (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTab(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(4)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="78d2d-105">Gibt den Bezeichner der benutzerdefinierten Registerkarte des Menübands an, die aktiviert werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-105">Specifies the identifier of the custom Ribbon tab to be activated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78d2d-106">Aktiviert die angegebene benutzerdefinierte Registerkarte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-106">Activates the specified custom tab.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateTabMso">
      <MemberSignature Language="C#" Value="public void ActivateTabMso (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTabMso([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTabMso(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTabMso (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTabMso(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(5)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="78d2d-107">Gibt den Bezeichner der benutzerdefinierten Registerkarte des Menübands an, die aktiviert werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-107">Specifies the identifier of the custom Ribbon tab to be activated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78d2d-108">Aktiviert die angegebene integrierte Registerkarte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-108">Activates the specified built-in tab.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateTabQ">
      <MemberSignature Language="C#" Value="public void ActivateTabQ (string ControlID, string Namespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTabQ([in]string ControlID, [in]string Namespace) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTabQ(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTabQ (ControlID As String, Namespace As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTabQ(System::String ^ ControlID, System::String ^ Namespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
        <Parameter Name="Namespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="78d2d-109">Gibt den Bezeichner der benutzerdefinierten Registerkarte des Menübands an, die aktiviert werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-109">Specifies the identifier of the custom Ribbon tab to be activated.</span>
          </span>
        </param>
        <param name="Namespace">
          <span data-ttu-id="78d2d-110">Gibt den Namespace des Registerkartenelements an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-110">Specifies the namespace of the tab element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78d2d-111">Aktiviert die angegebene benutzerdefinierte Registerkarte auf der Menüband-Benutzeroberfläche von Microsoft Office Fluent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-111">Activates the specified custom tab on the Microsoft Office Fluent Ribbon UI.</span>
          </span>
          <span data-ttu-id="78d2d-112">Registerkarte den Bezeichner enthält den vollqualifizierten Namen und den Namespace der Registerkarte verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-112">Uses the fully qualified name of the tab which includes the identifier and the namespace of the tab.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invalidate() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="78d2d-113">Macht die zwischengespeicherten Werte für alle Steuerelemente der Menüband-Benutzeroberfläche ungültig.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-113">Invalidates the cached values for all of the controls of the Ribbon user interface.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="78d2d-114">
            <para>Sie können die Multifunktionsleisten-Benutzeroberfläche mithilfe von Rückrufprozeduren in COM-add-ins anpassen. Für jede der die Rückrufe das Add-in implementiert wird werden die Antworten zwischengespeichert.  Angenommen, wenn ein Add-in-Writer die Rückrufprozedur <b>GetImage</b> für eine Schaltfläche implementiert, die Funktion einmal aufgerufen, die Bild wird geladen, und dann, wenn das Bild werden aktualisiert muss, das zwischengespeicherte Bild verwendet anstelle des Verfahrens zurückrufen. Dieser Prozess bleibt in-Place, bis das Add-in signalisiert, dass die zwischengespeicherten Werte ungültig sind, mithilfe der <b>Invalidate</b> -Methode, mit der die Zeit, die Rückrufprozedur erneut aufgerufen und die Rückgabe Antwort zwischengespeichert.  Das Add-in können Sie eine sofortige Aktualisierung der Benutzeroberfläche erzwingen, indem Aufrufen der <b>Refresh</b> -Methode.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-114">
              <para>You can customize the Ribbon UI by using callback procedures in COM add-ins. For each of the callbacks the add-in implements, the responses are  cached.  For example, if an add-in writer implements the <b>getImage</b> callback procedure for a button, the function is  called once, the image loads, and then if the image needs to be updated, the cached image is used instead of recalling the procedure. This process remains in-place until the add-in signals that the cached values are invalid by using the <b>Invalidate</b> method,  at which time, the callback procedure is again called and the return response is cached.  The add-in can then force an immediate update of the UI by calling the <b>Refresh</b> method.</para>
              <para />
            </span>
          </span>
        </remarks>
        <example>
          <span data-ttu-id="78d2d-115">
            <para>Im folgenden Beispiel löst die hostanwendung starten die <b>OnLoad</b> -Ereignisprozedur, die eine Prozedur dann die erstellt ein Objekt ruft, das der Menüband-Benutzeroberfläche darstellt.  Im nächsten Schritt eine Rückrufprozedur ist definiert, die alle Steuerelemente auf der Benutzeroberfläche ungültig macht und anschließend die Benutzeroberfläche aktualisiert.</para>
            <para>Im folgenden finden Sie das XML-Markup für Office zum Laden des benutzerdefinierten Menübands:</para>
            <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
            <para>Im folgenden ist die Rückrufmethode für das <b>OnLoad</b> -Ereignis:</para>
            <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-115">
              <para>In the following example,  starting the host application triggers the <b>onLoad</b> event  procedure that then calls a procedure which creates an object representing the Ribbon UI.  Next, a callback procedure is defined that invalidates all of the controls on the UI and then refreshes the UI.</para>
              <para>The following is the XML markup for Office to load the custom ribbon:</para>
              <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
              <para>The following is the callback method for the <b>onLoad</b> event:</para>
              <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code>
            </span>
          </span>
        </example>
      </Docs>
    </Member>
    <Member MemberName="InvalidateControl">
      <MemberSignature Language="C#" Value="public void InvalidateControl (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateControl([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.InvalidateControl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateControl (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateControl(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="78d2d-116">Gibt die ID des Steuerelements an, das ungültig gemacht wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-116">Specifies the ID of the control that will be invalidated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78d2d-117">Macht den zwischengespeicherten Wert für ein einzelnes Steuerelement der Menüband-Benutzeroberfläche ungültig.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-117">Invalidates the cached value for a single control on the Ribbon user interface.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="78d2d-118">
            <para>Sie können die Multifunktionsleisten-Benutzeroberfläche mithilfe von Rückrufprozeduren in COM-add-ins anpassen. Für jede der die Rückrufe das Add-in implementiert wird werden die Antworten zwischengespeichert.  Angenommen, wenn ein Add-in-Writer die Rückrufprozedur <b>GetImage</b> für eine Schaltfläche implementiert, die Funktion einmal aufgerufen, die Bild wird geladen, und dann, wenn das Bild werden aktualisiert muss, das zwischengespeicherte Bild verwendet anstelle des Verfahrens zurückrufen. Dieser Prozess bleibt in-Place für das Steuerelement, bis das Add-in signalisiert, dass die zwischengespeicherten Werte ungültig sind, mithilfe der <b>InvalidateControl</b> -Methode, mit der die Zeit, die Rückrufprozedur erneut aufgerufen und die Rückgabe Antwort zwischengespeichert.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-118">
              <para>You can customize the Ribbon UI by using callback procedures in COM add-ins. For each of the callbacks the add-in implements, the responses are  cached.  For example, if an add-in writer implements the <b>getImage</b> callback procedure for a button, the function is  called once, the image loads, and then if the image needs to be updated, the cached image is used instead of recalling the procedure. This process remains in-place for the control until the add-in signals that the cached values are invalid by using the <b>InvalidateControl</b> method,  at which time, the callback procedure is again called and the return response is cached.</para>
              <para />
            </span>
          </span>
        </remarks>
        <example>
          <span data-ttu-id="78d2d-119">
            <para>Im folgenden Beispiel löst die hostanwendung starten die <b>OnLoad</b> -Ereignisprozedur, die eine Prozedur dann die erstellt ein Objekt ruft, das der Menüband-Benutzeroberfläche darstellt.  Im nächsten Schritt eine Rückrufprozedur wird definiert, ein Steuerelement auf der Benutzeroberfläche erklärt und anschließend die Benutzeroberfläche aktualisiert.</para>
            <para>Im folgenden finden Sie das XML-Markup für Office zum Laden des benutzerdefinierten Menübands:</para>
            <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
            <para>Im folgenden ist die Rückrufmethode für das <b>OnLoad</b> -Ereignis:</para>
            <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the cache of a single control 
    MyRibbon.InvalidateControl(“control5”)            
End Sub</code>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-119">
              <para>In the following example,  starting the host application triggers the <b>onLoad</b> event procedure that then calls a procedure which creates an object representing the Ribbon UI.  Next, a callback procedure is defined that invalidates a control on the UI and then refreshes the UI.</para>
              <para>The following is the XML markup for Office to load the custom ribbon:</para>
              <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
              <para>The following is the callback method for the <b>onLoad</b> event:</para>
              <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the cache of a single control 
    MyRibbon.InvalidateControl(“control5”)            
End Sub</code>
            </span>
          </span>
        </example>
      </Docs>
    </Member>
    <Member MemberName="InvalidateControlMso">
      <MemberSignature Language="C#" Value="public void InvalidateControlMso (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateControlMso([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.InvalidateControlMso(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateControlMso (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateControlMso(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="78d2d-120">Den Bezeichner des Steuerelements, das ungültig gemacht wird angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-120">Specified the identifier of the control that will be invalidated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78d2d-121">Mit dieser Methode wird ein integriertes Steuerelement für ungültig erklärt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-121">Used to invalidate a built-in control.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="78d2d-122">
            <para>Ein Steuerelement für ungültig erklärt wird die Anzeige aktualisiert und bewirkt, dass alle diesem Steuerelement auszuführenden zugeordneten Rückrufprozeduren.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="78d2d-122">
              <para>Invalidating a control repaints the screen and causes any callback procedures associated with that control to run.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>