<Type Name="IRibbonExtensibility" FullName="Microsoft.Office.Core.IRibbonExtensibility">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2d96e52fd7252b7936c795df835e653a608ad8c1" />
    <Meta Name="ms.sourcegitcommit" Value="f41bc3cdd2c00b9a51a4340ac823a9e309633924" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20659872" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRibbonExtensibility" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRibbonExtensibility" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Core.IRibbonExtensibility" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRibbonExtensibility" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRibbonExtensibility" />
  <AssemblyInfo>
    <AssemblyName>office</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000C0396-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Die Schnittstelle, über die die Menüband-Benutzeroberfläche mit einem COM-Add-In kommuniziert, um die Benutzeroberfläche anzupassen.</summary>
    <remarks>
      <para>Die <b>IRibbonExtensibility</b> -Schnittstelle weist eine einzige Methode, <b>GetCustomUI</b>.</para>
      <para />
    </remarks>
    <example>
      <para>In der folgenden in c# geschriebenen Beispiel wird die <b>IRibbonExtensibility</b> -Schnittstelle in der Klassendefinition angegeben. Das Verfahren klicken Sie dann die Schnittstellen einzige Methode implementiert, <b>GetCustomUI</b>. Diese Methode erstellt eine Instanz eines Objekts, das liest <b>SteamReader</b> im angepassten Markup in einer externen XML-Datei gespeichert.</para>
      <code>public class Connect : Object, Extensibility.IDTExtensibility2, IRibbonExtensibility 
... 
 
public string GetCustomUI(string RibbonID) 
{ 
 
   StreamReader customUIReader = new System.IO.StreamReader("C:\\RibbonXSampleCS\\customUI.xml"); 
 
   string customUIData = customUIReader.ReadToEnd(); 
 
   return customUIData; 
}</code>
    </example>
  </Docs>
  <Members>
    <Member MemberName="GetCustomUI">
      <MemberSignature Language="C#" Value="public string GetCustomUI (string RibbonID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCustomUI([in]string RibbonID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonExtensibility.GetCustomUI(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomUI (RibbonID As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCustomUI(System::String ^ RibbonID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RibbonID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="RibbonID">To be added.</param>
        <summary>Lädt das XML-Markup aus einer XML-Anpassungsdatei oder aus XML-Markup, das in die Prozedur eingebettet ist, mit der die Menüband-Benutzeroberfläche angepasst wird.</summary>
        <returns>Zeichenfolge</returns>
        <remarks>To be added.</remarks>
        <example>
          <para>In der folgenden in c# geschriebenen Beispiel wird die <b>IRibbonExtensibility</b> -Schnittstelle in der Klassendefinition angegeben. Anschließend wird die Schnittstellen einzige Methode, <b>GetCustomUI</b>implementiert. Die Methode erstellt eine Instanz eines Objekts, das liest <b>SteamReader</b> im Anpassungsmarkup in einer externen XML-Datei.</para>
          <code>public class Connect : Object, Extensibility.IDTExtensibility2, IRibbonExtensibility 
... 
 
public string GetCustomUI(string RibbonID) 
{ 
 
   StreamReader customUIReader = new System.IO.StreamReader("C:\\RibbonXSampleCS\\customUI.xml"); 
 
   string customUIData = customUIReader.ReadToEnd(); 
 
   return customUIData; 
}</code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>