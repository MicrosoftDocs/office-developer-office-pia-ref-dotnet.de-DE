<Type Name="IRibbonControl" FullName="Microsoft.Office.Core.IRibbonControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68773fd86e42dc3132be028386c9b8eeaf465f51" />
    <Meta Name="ms.sourcegitcommit" Value="f41bc3cdd2c00b9a51a4340ac823a9e309633924" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20660259" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRibbonControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRibbonControl" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Core.IRibbonControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRibbonControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRibbonControl" />
  <AssemblyInfo>
    <AssemblyName>office</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000C0395-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt das Objekt in jeder Menüband Benutzeroberfläche (UI) des Benutzersteuerelements Callback-Prozedur übergeben.</summary>
    <remarks>
      <para>Das <b>IRibbonControl</b> -Objekt enthält den Namen (ID) des Steuerelements und das aktuelle <b>Window</b> -Objekt für das Steuerelement der Menüband-Benutzeroberfläche.</para>
      <para />
    </remarks>
    <example>
      <para>Im folgenden in c# geschriebene Beispiel zeigt die folgenden beiden Verfahren aus den <b>OnAction</b> -Ereignisprozedur ein Button-Steuerelement und ein ToggleButton-Steuerelement aufgerufen. In der ersten Prozedur das <b>IRibbonControl</b> -Objekt, das das Steuerelement darstellt, wird an die Prozedur übergeben, und ein Meldungsfeld wird angezeigt, dass die zusammen mit der ID der Schaltfläche gedrückt wurde. Die zweite Prozedur ist ähnlich wie die erste zusätzlich eine <b>boolesche</b> Parameter gibt an, dass die Taste gedrückt wurde.</para>
      <code>&lt;span class="label"&gt;public void ButtonOnAction(IRibbonControl control) 
   MessageBox.Show("Button clicked: " + control.Id); 
} 
 
public void ToggleButtonOnAction(IRibbonControl control, bool pressed) 
{ 
 
 
...if (pressed) 
 
      MessageBox.Show("ToggleButton was switched on."); 
 
 
   else 
      MessageBox.Show("ToggleButton was switched off."); 
 
}&lt;/span&gt;</code>
    </example>
  </Docs>
  <Members>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public object Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Context { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt das aktive Fenster dar, das die Menüband-Benutzeroberfläche enthält, die eine Rückrufprozedur auslöst. Schreibgeschützt.</summary>
        <value>Objekt</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die ID des Steuerelements ab, das in der Menüband-XML-Markup-Anpassungsdatei angegeben ist. Schreibgeschützt.</summary>
        <value>Zeichenfolge</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public string Tag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Tag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Tag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wird verwendet, um beliebige Zeichenfolgen zu speichern und zur Laufzeit abzurufen. Schreibgeschützt.</summary>
        <value>Zeichenfolge</value>
        <remarks>
          <para>Normalerweise können Sie zwischen Steuerelementen in einem Menüband Benutzer Schnittstelle XML-Anpassungsdatei mithilfe der <b>Id</b> -Eigenschaft unterscheiden. Es gibt jedoch Einschränkungen auf was IDs enthalten können (keine nicht alphanumerische Zeichen enthält, und sie müssen alle eindeutig sein).  Die <b>Tag</b> -Eigenschaft verfügt nicht über diese Beschränkungen und daher in den folgenden Situationen, wobei ID funktioniert nicht verwendet werden können:</para>
          <list type="bullet">
            <item>
              <para>, wenn Sie eine spezielle Zeichenfolge mit dem Steuerelement wie eines Dateinamens speichern müssen.  Beispiel: Tag="C:\path\file.xlsm."</para>
            </item>
            <item>
              <para>, Wenn Sie mehrere Steuerelemente werden sollen die gleiche Weise behandelt, von der Rückrufprozedur, aber Sie möchten nicht beibehalten einer Liste von deren IDs (die eindeutig sein müssen).  Angenommen, Sie haben Schaltflächen auf verschiedenen Registerkarten auf dem Menüband, alle mit Tag = "Blue" und überprüfen Sie dann die <b>Tag</b> -Eigenschaft anstelle der <b>ID</b> -Eigenschaft nur konnte bei der Ausführung gängiger Aktionen.</para>
            </item>
          </list>
          <para />
          <para />
        </remarks>
        <example>
          <para>In den XML-Code zum Anpassen der Multifunktionsleisten-Benutzeroberfläche verwendet können Sie ein Tag wie folgt festlegen. Wenn die Aktion MyFunction aufgerufen wird, können Sie die <b>Tag</b> -Eigenschaft lesen auf "eine Zeichenfolge" entspricht.</para>
          <code>&lt;span class="label"&gt;&amp;lt;button id=”mybutton” tag=”some string” onAction=”MyFunction”/&amp;gt;&lt;/span&gt;</code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>